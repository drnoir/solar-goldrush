const I={r:255,g:255,b:255},s=s=>(I=>"#"===I.charAt(0)&&7===I.length)(s)?(I=>({r:parseInt(I.substr(1,2),16),g:parseInt(I.substr(3,2),16),b:parseInt(I.substr(5,2),16)}))(s):(I=>I.startsWith("rgba"))(s)?(I=>{const[,s,F,U,g]=/^\s*rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/.exec(I);return{r:s,g:F,b:U}})(s):I,F=()=>1e3*(Math.random()-.5);class U{constructor(I,s,F){this.x=I,this.y=s,this.z=F,this.size=.5+Math.random()}}class g{config={};stars=[];constructor(I){this.ctx=I.getContext("2d")}update(I){let g=!1;for(const[C,c]of Object.entries(I))if(this.config[C]!==c){switch(C){case"width":case"height":case"starScale":g=!0;break;case"density":const I=Math.ceil(1e3*c),C=I-this.stars.length;if(C>0)for(let I=0;I<C;I++){const I=new U(F(),F(),1e3*Math.random());this.stars.push(I)}else this.stars.length=I;break;case"starColor":const B=s(c);this.starR=B.r,this.starG=B.g,this.starB=B.b}this.config[C]=c}g&&(this.size=Math.max(this.config.width,this.config.height)/(10/this.config.starScale),this.maxLineWidth=this.size/30)}draw(I){this.move(I);const s=this.config.width,F=this.config.height;this.size=Math.max(s,F)/(10/this.config.starScale);const U=this.ctx;U.fillStyle=this.config.backgroundColor,U.fillRect(0,0,s,F);for(const I of this.stars){const g=I.x/I.z,C=I.y/I.z;if(!this.config.warpEffect&&(g<-.5||g>.5||C<-.5||C>.5))continue;const c=I.size*this.size/I.z;if(!(c<.3)){if(this.config.depthAlpha){const s=(1e3-I.z)/1e3;U.fillStyle=`rgba(${this.starR}, ${this.starG}, ${this.starB}, ${s.toString()})`}else U.fillStyle=this.config.starColor;if(this.config.warpEffect){U.beginPath();const B=I.x/(I.z+this.config.warpEffectLength*this.config.speed),Q=I.y/(I.z+this.config.warpEffectLength*this.config.speed);if(B<-.5||B>.5||Q<-.5||Q>.5)continue;U.moveTo(s*(g+.5)-c/2,F*(C+.5)-c/2),U.lineTo(s*(B+.5)-c/2,F*(Q+.5)-c/2),U.lineWidth=Math.min(c,this.maxLineWidth),U.lineCap=this.config.useCircles?"round":"butt",U.strokeStyle=U.fillStyle,U.stroke()}else this.config.useCircles?(U.beginPath(),U.arc(s*(g+.5)-c/2,F*(C+.5)-c/2,c/2,0,2*Math.PI),U.fill()):U.fillRect(s*(g+.5)-c/2,F*(C+.5)-c/2,c,c)}}}move(I){const s=this.config.speed*(I/10);for(const I of this.stars)for(I.z-=s;I.z<1;)I.z+=1e3,I.x=(Math.random()-.5)*I.z,I.y=(Math.random()-.5)*I.z}}function C(I,s,F){var U=void 0===s?null:s,g=function(I,s){var F=atob(I);if(s){for(var U=new Uint8Array(F.length),g=0,C=F.length;g<C;++g)U[g]=F.charCodeAt(g);return String.fromCharCode.apply(null,new Uint16Array(U.buffer))}return F}(I,void 0!==F&&F),C=g.indexOf("\n",10)+1,c=g.substring(C)+(U?"//# sourceMappingURL="+U:""),B=new Blob([c],{type:"application/javascript"});return URL.createObjectURL(B)}var c,B,Q,i,L=(c="Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y29uc3QgdD17cjoyNTUsZzoyNTUsYjoyNTV9LHM9cz0+KHQ9PiIjIj09PXQuY2hhckF0KDApJiY3PT09dC5sZW5ndGgpKHMpPyh0PT4oe3I6cGFyc2VJbnQodC5zdWJzdHIoMSwyKSwxNiksZzpwYXJzZUludCh0LnN1YnN0cigzLDIpLDE2KSxiOnBhcnNlSW50KHQuc3Vic3RyKDUsMiksMTYpfSkpKHMpOih0PT50LnN0YXJ0c1dpdGgoInJnYmEiKSkocyk/KHQ9Pntjb25zdFsscyxpLGUsbl09L15ccypyZ2JhXHMqXChccyooXGQrKVxzKixccyooXGQrKVxzKixccyooXGQrKVxzKixccyooXGQrKVxzKlwpXHMqJC8uZXhlYyh0KTtyZXR1cm57cjpzLGc6aSxiOmV9fSkocyk6dCxpPSgpPT4xZTMqKE1hdGgucmFuZG9tKCktLjUpO2NsYXNzIGV7Y29uc3RydWN0b3IodCxzLGkpe3RoaXMueD10LHRoaXMueT1zLHRoaXMuej1pLHRoaXMuc2l6ZT0uNStNYXRoLnJhbmRvbSgpfX1jbGFzcyBue2NvbmZpZz17fTtzdGFycz1bXTtjb25zdHJ1Y3Rvcih0KXt0aGlzLmN0eD10LmdldENvbnRleHQoIjJkIil9dXBkYXRlKHQpe2xldCBuPSExO2Zvcihjb25zdFtvLGFdb2YgT2JqZWN0LmVudHJpZXModCkpaWYodGhpcy5jb25maWdbb10hPT1hKXtzd2l0Y2gobyl7Y2FzZSJ3aWR0aCI6Y2FzZSJoZWlnaHQiOmNhc2Uic3RhclNjYWxlIjpuPSEwO2JyZWFrO2Nhc2UiZGVuc2l0eSI6Y29uc3QgdD1NYXRoLmNlaWwoMWUzKmEpLG89dC10aGlzLnN0YXJzLmxlbmd0aDtpZihvPjApZm9yKGxldCB0PTA7dDxvO3QrKyl7Y29uc3QgdD1uZXcgZShpKCksaSgpLDFlMypNYXRoLnJhbmRvbSgpKTt0aGlzLnN0YXJzLnB1c2godCl9ZWxzZSB0aGlzLnN0YXJzLmxlbmd0aD10O2JyZWFrO2Nhc2Uic3RhckNvbG9yIjpjb25zdCBoPXMoYSk7dGhpcy5zdGFyUj1oLnIsdGhpcy5zdGFyRz1oLmcsdGhpcy5zdGFyQj1oLmJ9dGhpcy5jb25maWdbb109YX1uJiYodGhpcy5zaXplPU1hdGgubWF4KHRoaXMuY29uZmlnLndpZHRoLHRoaXMuY29uZmlnLmhlaWdodCkvKDEwL3RoaXMuY29uZmlnLnN0YXJTY2FsZSksdGhpcy5tYXhMaW5lV2lkdGg9dGhpcy5zaXplLzMwKX1kcmF3KHQpe3RoaXMubW92ZSh0KTtjb25zdCBzPXRoaXMuY29uZmlnLndpZHRoLGk9dGhpcy5jb25maWcuaGVpZ2h0O3RoaXMuc2l6ZT1NYXRoLm1heChzLGkpLygxMC90aGlzLmNvbmZpZy5zdGFyU2NhbGUpO2NvbnN0IGU9dGhpcy5jdHg7ZS5maWxsU3R5bGU9dGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yLGUuZmlsbFJlY3QoMCwwLHMsaSk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5zdGFycyl7Y29uc3Qgbj10LngvdC56LG89dC55L3QuejtpZighdGhpcy5jb25maWcud2FycEVmZmVjdCYmKG48LS41fHxuPi41fHxvPC0uNXx8bz4uNSkpY29udGludWU7Y29uc3QgYT10LnNpemUqdGhpcy5zaXplL3QuejtpZighKGE8LjMpKXtpZih0aGlzLmNvbmZpZy5kZXB0aEFscGhhKXtjb25zdCBzPSgxZTMtdC56KS8xZTM7ZS5maWxsU3R5bGU9YHJnYmEoJHt0aGlzLnN0YXJSfSwgJHt0aGlzLnN0YXJHfSwgJHt0aGlzLnN0YXJCfSwgJHtzLnRvU3RyaW5nKCl9KWB9ZWxzZSBlLmZpbGxTdHlsZT10aGlzLmNvbmZpZy5zdGFyQ29sb3I7aWYodGhpcy5jb25maWcud2FycEVmZmVjdCl7ZS5iZWdpblBhdGgoKTtjb25zdCBoPXQueC8odC56K3RoaXMuY29uZmlnLndhcnBFZmZlY3RMZW5ndGgqdGhpcy5jb25maWcuc3BlZWQpLGM9dC55Lyh0LnordGhpcy5jb25maWcud2FycEVmZmVjdExlbmd0aCp0aGlzLmNvbmZpZy5zcGVlZCk7aWYoaDwtLjV8fGg+LjV8fGM8LS41fHxjPi41KWNvbnRpbnVlO2UubW92ZVRvKHMqKG4rLjUpLWEvMixpKihvKy41KS1hLzIpLGUubGluZVRvKHMqKGgrLjUpLWEvMixpKihjKy41KS1hLzIpLGUubGluZVdpZHRoPU1hdGgubWluKGEsdGhpcy5tYXhMaW5lV2lkdGgpLGUubGluZUNhcD10aGlzLmNvbmZpZy51c2VDaXJjbGVzPyJyb3VuZCI6ImJ1dHQiLGUuc3Ryb2tlU3R5bGU9ZS5maWxsU3R5bGUsZS5zdHJva2UoKX1lbHNlIHRoaXMuY29uZmlnLnVzZUNpcmNsZXM/KGUuYmVnaW5QYXRoKCksZS5hcmMocyoobisuNSktYS8yLGkqKG8rLjUpLWEvMixhLzIsMCwyKk1hdGguUEkpLGUuZmlsbCgpKTplLmZpbGxSZWN0KHMqKG4rLjUpLWEvMixpKihvKy41KS1hLzIsYSxhKX19fW1vdmUodCl7Y29uc3Qgcz10aGlzLmNvbmZpZy5zcGVlZCoodC8xMCk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5zdGFycylmb3IodC56LT1zO3QuejwxOyl0LnorPTFlMyx0Lng9KE1hdGgucmFuZG9tKCktLjUpKnQueix0Lnk9KE1hdGgucmFuZG9tKCktLjUpKnQuen19bGV0IG8sYSxoO2NvbnN0IGM9dD0+e2h8fChvLmRyYXcobnVsbD09PWE/MTp0LWEpLGE9dCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYykpfTtvbm1lc3NhZ2U9KHtkYXRhOntjYW52YXM6dCxjb25maWc6cyxwYXVzZTppfX0pPT57dm9pZCAwIT09dCYmKG89bmV3IG4odCkpLHZvaWQgMCE9PXMmJm8udXBkYXRlKHMpLHZvaWQgMCE9PWkmJihoPWksaHx8KGE9bnVsbCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYykpKX19KCk7Cgo=",B="data:application/json;charset=utf-8;base64,",Q=!1,function(I){return i=i||C(c,B,Q),new Worker(i,I)});AFRAME.registerComponent("warpspeed",{schema:{width:{type:"number",default:512},height:{type:"number",default:512},speed:{type:"number",default:.7},density:{type:"number",default:25.7},useCircles:{type:"boolean",default:!0},depthAlpha:{type:"boolean",default:!0},warpEffect:{type:"boolean",default:!0},warpEffectLength:{type:"number",default:5},starScale:{type:"number",default:3},backgroundColor:{type:"color",default:"#100a1a"},starColor:{type:"color",default:"#ffffff"},useWorker:{type:"boolean",default:!1}},update(I){(I.useWorker!==this.data.useWorker||I.width!==this.data.width||I.height!==this.data.height)&&(void 0!==I.useWorker&&this.destroyCanvasMap(),this.createCanvasMap(),this.initWarpspeed()),this.workerInUse()?this.worker.postMessage({config:this.data,pause:!this.isPlaying}):this.warpspeed.update(this.data)},initWarpspeed(){if(this.el.removeState("worker"),this.data.useWorker)try{const I=this.canvas.transferControlToOffscreen();return this.worker=new L,this.worker.postMessage({canvas:I},[I]),void this.el.addState("worker")}catch(I){console.error(I)}this.warpspeed=new g(this.canvas)},createCanvasMap(){this.canvas=document.createElement("canvas"),this.canvas.width=this.data.width,this.canvas.height=this.data.height,this.canvasMap=new THREE.Texture(this.canvas),this.el.getObject3D("mesh").material.map=this.canvasMap},destroyCanvasMap(){this.workerInUse()?(this.worker.terminate(),delete this.worker):delete this.warpspeed,this.canvasMap.dispose(),delete this.canvas},play(){this.workerInUse()&&this.worker.postMessage({pause:!1})},pause(){this.workerInUse()&&this.worker.postMessage({pause:!0})},workerInUse(){return this.el.is("worker")},tick(I,s){this.workerInUse()||this.warpspeed.draw(s),this.canvasMap.needsUpdate=!0}});